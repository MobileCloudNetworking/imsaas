__author__ = 'sruffino'

import json
import os
import requests

from interfaces.ServiceAdapter import ServiceAdapter as ABCServiceAdapter


class MMEAdapter(ABCServiceAdapter):

    def __init__(self):
        """
        Initializes a new ServiceAdapter.
        :return:
        """
        # -------------------------------------------------------#
        #   Parameters for preinit/install
        # -------------------------------------------------------#
        MME_CONSOLE_PORT="10080"
        OFP_PORT="6634"
        NETD_FLOATING_NETWORK_CIDR="5.5.5.0/24" # (e.g.: 192.168.95.0/24 ) Example from the wall
        OFP_PROTOCOL="tcp"
        MME_NET_D_IP="5.5.5.30"
        MME_MGMT_IP="3.3.3.30"
        ZABBIX_IP="9.9.9.9"
        # -------------------------------------------------------#
        #   Parameters for enodeb relation
        # -------------------------------------------------------#
        # THIS WILL NOT BE NEEDED , THEREFOR WE NEED TO REMOVE
        # DEPENDENCIES FROM PRE-START
        ENODEB_NAME="ENB" # e.g. ENODEB-5G-1752084917 (generated by orchestrator)
        ENODEB_NET_C_IP="127.0.0.1" 
        NETWORK_IP="192.168.3.0"
        NETWORK_MASK="255.255.255.0"
        NETWORK_START="192.168.3.100"
        NETWORK_END="192.168.3.130"
        # -------------------------------------------------------#
        #   Parameters for bt relation
        # -------------------------------------------------------#
        BT_NAME="BT-5G-2675998530" # e.g. BT-5G-2675998530 (generated by orchestrator)
        # -------------------------------------------------------#
        #   Parameters for dns relation
        # -------------------------------------------------------#
        DNS_REALM="epc.mnc001.mcc001.3gppnetwork.org"
        DNS_LISTEN=MME_MGMT_IP
        DNS_IP="11.11.11.11"
        # -------------------------------------------------------#
        #   Parameters for pgw_u relation
        # -------------------------------------------------------#
        PGWU_SGWU_ID="3812090105" # (e.g.: 3812090105 ) The unit id generated by orchestrator (or whatever ID generated by you )
        OFP_DATAPATH_ID="3812090105000000" # (e.g.: $PGWU_SGWU_ID000000) unit id with appended zeros to match length for datapath_id
        PGWU_NET_A_IP="4.4.4.10"
        PGWU_NET_B_IP=""
        SGWU_PGWU_NET_D="5.5.5.10" # NOT THE FLOATING IP HERE
        SGWU_PGWU_FLOATING_IP_NET_D=""
        PGW_U_Upload_Interface_IP=PGWU_NET_B_IP # Care you may have to use the floating IP of this network
        PGW_U_Download_Interface_IP=PGWU_NET_A_IP
        # -------------------------------------------------------#
        #   Additional Parameters
        # -------------------------------------------------------#
        HSS_PORT="3870"
        HSS_NAME="" # The name used in dns for hss service ( without realm!! Just the beginning name e.g: hss)

    def preinit(self, config):
        """
        sends the preinit method based on the received config parameters
        curl -X POST -H "Content-Type:application/json" -d "{\"parameters\":[\"net_d=$MME_NET_D_IP,mgmt=$MME_MGMT_IP\",\"$ZABBIX_IP\"]}" http://127.0.0.1:8390/mme-sgw_c-pgw_c-5G/preinit
        :param config:
        :return:
        """

        parameters = []
        networks = ""
        for net_name, net_ip in config['ips'].items():
            networks = networks + ("%s=%s;"%(net_name,net_ip))
        parameters.append(networks)
        parameters.append(config['zabbix_ip'])

        request = {"parameters":parameters}
        print "I'm the mme-pgwc-sgwc adapter, preinit mme-pgwc-sgwc service, \
               parameters %s, request %s" %(parameters,str(json.dumps(request)))

        url = 'http://' + config['floating_ips'].get('mgmt') + \
              ':8390/mme-sgw_c-pgw_c-5G/preinit'
        headers = {'content-type': 'application/json'}
        response = requests.post(url, data=json.dumps(request), headers=headers)

        print response.content
        print "I'm the mme-pgwc-sgwc adapter, preinit mme-pgwc-sgwc services, \
               received resp %s" %response

        return True

    def install(self, config):
        """
        Creates a new Service based on the config file.
         curl -X POST -H "Content-Type:application/json" \
        -d "{\"parameters\":[\"$MME_MGMT_IP\",\"$MME_CONSOLE_PORT\", \
        \"true,\"$MME_NET_D_IP\",\"$OFP_PORT\",\"$OFP_PROTOCOL\"]}" \
        http://127.0.0.1:8390/mme-sgw_c-pgw_c-5G/install
   
        :params config:
        :return:
        """

        exp_params = ['MME_MGMT_IP', 'MME_CONSOLE_PORT', 'MME_NET_D_IP', 
                     'OFP_PORT', 'OFP_PROTOCOL']

        # pgwu-sgwu
        for v in exp_params:
            if v not in config:
                print "MME adapter - install _ missing parameter: " + v
                return False

        parameters = []
        parameters.append(config['MME_MGMT_IP'])
        parameters.append(config['MME_CONSOLE_PORT'])
        parameters.append('true')
        parameters.append(config['MME_NET_D_IP'])
        parameters.append(config['OFP_PORT'])
        parameters.append(config['OFP_PROTOCOL'])

        # create request nat
        request = {"parameters":parameters}
        print "I'm the mme-pgwc-sgwc adapter, install mme-pgwc-sgwc service, parameters %s" %(parameters)
        
        url = 'http://' + config['floating_ips'].get('mgmt') + \
              ':8390/mme-sgw_c-pgw_c-5G/install'
        headers = {'content-type': 'application/json'}
        response = requests.post(url, data=json.dumps(request), headers=headers)
        
        print response.content
        print "I'm the mme-pgwc-sgwc adapter, installing mme-pgwc-sgwc service, received resp %s" %response

        return True

    def pre_start(self, config):
        """
        Pre-start method

        curl -X POST -H "Content-Type:application/json" -d "{\"parameters\":[\"$
        MME_MGMT_IP\",\"$MME_CONSOLE_PORT\",\"$MME_NET_D_IP\",\"$DNS_REALM\",\"$
        SGWU_PGWU_FLOATING_IP_NET_D\",\"$ENODEB_NET_C_IP\",\"$HSS_NAME\",\"$HSS_
        PORT\",\"$OFP_PORT\",\"$OFP_PROTOCOL\",\"$SGWU_PGWU_NET_D\",\"$DNS_REALM
        \"]}" http://127.0.0.1:8390/mme-sgw_c-pgw_c-5G/pre-start

        :param config:
        :return:
        """

        exp_params = [ 'MME_MGMT_IP',
        'SGW_IP', # SR: added by me
         'MME_CONSOLE_PORT',
         'MME_NET_D_IP',
         'DNS_REALM',
         'SGWU_PGWU_FLOATING_IP_NET_D',
         'ENODEB_NET_C_IP',
         'HSS_NAME',
         'HSS_PORT',
         'OFP_PORT',
         'OFP_PROTOCOL',
         'SGWU_PGWU_NET_D']

        # pgwu-sgwu
        for v in exp_params:
            if v not in config:
                print "MME adapter - preStart _ missing parameter: " + v
                return False

        parameters = []
        parameters.append(config['MME_MGMT_IP'])
        parameters.append(config['SGW_IP'])
        parameters.append(config['MME_CONSOLE_PORT'])
        parameters.append(config['MME_NET_D_IP'])
        parameters.append(config['DNS_REALM'])
        parameters.append(config['SGWU_PGWU_FLOATING_IP_NET_D'])
        parameters.append(config['ENODEB_NET_C_IP'])
        parameters.append(config['HSS_NAME'])
        parameters.append(config['HSS_PORT'])
        parameters.append(config['OFP_PORT'])
        parameters.append(config['OFP_PROTOCOL'])
        parameters.append(config['SGWU_PGWU_NET_D'])
        parameters.append(config['DNS_REALM'])

        # create request nat
        request = {"parameters":parameters}
        print "I'm the mme-pgwc-sgwc adapter, preStart mme-pgwc-sgwc service, parameters %s" %(parameters)
        
        url = 'http://' + config['floating_ips'].get('mgmt') + \
              ':8390/mme-sgw_c-pgw_c-5G/pre-start'
        headers = {'content-type': 'application/json'}
        response = requests.post(url, data=json.dumps(request), headers=headers)
        
        print response.content
        print "I'm the mme-pgwc-sgwc adapter, preStarting mme-pgwc-sgwc service, received resp %s" %response

        return True

    def add_dependency(self, config, ext_service): 
        """ Add the dependency between this service and the external one 
        # enodeb - relation 

        curl -X POST -H "Content-Type:application/json" -d
        "{\"parameters\":[\"$ENODEB_NAME\",\
        "$NETWORK_IP\",\"$NETWORK_MASK\",\"$NETWORK_START\",\"$NETWORK_END\"]}"
        http://127.0.0.1:8390/mme-sgw_c-pgw_c-5G/addRelation/enodeb

        # bt - relation

        curl -X POST -H "Content-Type:application/json" -d "{\"parameters\":[\"$
        BT_NAME\",\"$NETWORK_IP\",\"$NETWORK_MASK\",\"$NETWORK_START\",\"$NETWOR
        K_END\"]}" http://127.0.0.1:8390/mme-sgw_c-pgw_c-5G/addRelation/bt

        # dns - relation

        curl -X POST -H "Content-Type:application/json" -d
        "{\"parameters\":[\"$DNS_IP\",\"$DNS_REALM\",\"$DNS_LISTEN\"]}"
        http://127.0.0.1:8390/mme-sgw_c-pgw_c-5G/addRelation/dns

        # pgw_u - relation         

        curl -X POST -H "Content-Type:application/json" -d
        "{\"parameters\":[\"$OFP_DATAPATH_ID\",\"$PGW_U_Upload_Int
        erface_IP\",\"$PGW_U_Download_Interface_IP\"]}" http://127.0.0.1:8390/mme-sgw_c-
        pgw_c-5G/addRelation/pgw_u

        :return:
        """

        exp_params_enodeb = ['ENODEB_NAME', 'NETWORK_IP', 'NETWORK_MASK', 
                             'NETWORK_START', 'NETWORK_END']

        exp_params_bt = ['BT_NAME',
        'NETWORK_IP',
        'NETWORK_MASK', 
        'NETWORK_START', 
        'NETWORK_END']

        exp_params_dns = [    'DNS_IP',
        'DNS_REALM',
        'DNS_LISTEN'
            ]

        exp_params_pgw_u = [    'OFP_DATAPATH_ID',
        'PGW_U_Upload_Interface_IP',
        'PGW_U_Download_Interface_IP'
            ]

        parameters = []
        if ext_service == 'enodeb':

            for v in exp_params_enodeb:
                if v not in config:
                    print "MME adapter - add_relation _ missing parameter: " + v
                    return False

            # parameters require a specific order
            parameters.append(config['ENODEB_NAME'])
            parameters.append(config['NETWORK_IP'])
            parameters.append(config['NETWORK_MASK'])
            parameters.append(config['NETWORK_START'])
            parameters.append(config['NETWORK_END'])
        elif ext_service == 'bt':

            for v in exp_params_bt:
                if v not in config:
                    print "MME adapter - add_relation _ missing parameter: " + v
                    return False

            # parameters require a specific order
            parameters.append(config['BT_NAME'])
            parameters.append(config['NETWORK_IP'])
            parameters.append(config['NETWORK_MASK'])
            parameters.append(config['NETWORK_START'])
            parameters.append(config['NETWORK_END'])
        elif ext_service == 'dns':

            for v in exp_params_dns:
                if v not in config:
                    print "MME adapter - add_relation _ missing parameter: " + v
                    return False
            parameters.append(config['DNS_IP'])
            parameters.append(config['DNS_REALM'])
            parameters.append(config['DNS_LISTEN'])
        
        elif ext_service == 'pgw_u':
            for v in exp_params_pgw_u:
                if v not in config:
                    print "MME adapter - add_relation _ missing parameter: " + v
                    return False
            parameters.append(config['OFP_DATAPATH_ID'])
            parameters.append(config['PGW_U_Upload_Interface_IP'])
            parameters.append(config['PGW_U_Download_Interface_IP'])
        
        else:
            print ("MME adapter - wrong ext_service")

       
        request = {"parameters":parameters}
        print "I'm the mme-pgwc-sgwc adapter, adding " + ext_service +  " relation to mme-pgwc-sgwc service, parameters %s" %(parameters)
        
        url = 'http://' + config['floating_ips'].get('mgmt')+ \
              ':8390/mme-sgw_c-pgw_c-5G/addRelation/' + ext_service
        headers = {'content-type': 'application/json'}
        response = requests.post(url, data=json.dumps(request), headers=headers)
        
        print response.content
        print "I'm the mme-pgwc-sgwc adapter, adding " + ext_service +  " relation to mme-pgwc-sgwc service, received resp %s" %response
        return True


    def remove_dependency(self, config, ext_service):
        """
        Remove the dependency between this service and the external one
        :return:
        """
        pass

    def start(self, config):
        """
        Sending start requests to the different components
        curl -X POST -H "Content-Type:application/json" \
        -d "{\"parameters\":[]}" http://$NAT_PUBLIC_IP:8390/mme-sgw_c-pgw_c-5G/start        
        :return:
        """

        parameters = []

        request = {"parameters":parameters}
        print "I'm the mme-pgwc-sgwc adapter, adding pgwu relation to mme-pgwc-sgwc service, parameters %s" %(parameters)
        
        url = 'http://' + config['floating_ips'].get('mgmt') + ':8390/mme-sgw_c-pgw_c-5G/start'
        headers = {'content-type': 'application/json'}
        response = requests.post(url, data=json.dumps(request), headers=headers)
        
        print response.content
        print "I'm the mme-pgwc-sgwc adapter, adding pgwu relation to mme-pgwc-sgwc service, received resp %s" %response
        return True

    def terminate(self):
        """
        Terminate the service
        :return:
        """
        pass

if __name__ == '__main__':
    # set http_proxy to epc-proxy VM
    os.environ['http_proxy']='http://130.92.70.187:3128'
    c = MMEAdapter()
    # since we use the proxy, no floating_ip needed
    mme_floating_ip = '192.168.85.97' 

    # preinit
    config = {}
    config['hostname'] = "mme-pgwc-sgwc"
    config['ips'] = {'mgmt':'192.168.85.97', 'net_d':'172.19.8.97'}
    config['zabbix_ip'] = '9.9.9.9'
    config['floating_ips'] = {'mgmt':mme_floating_ip}
    c.preinit(config)

    # install
    config = {}
    config = {'MME_MGMT_IP': '192.168.85.97',
 'MME_CONSOLE_PORT': '10080',
 'MME_NET_D_IP': '172.19.8.97',
 'OFP_PORT': '6634',
 'OFP_PROTOCOL': 'tcp'}  
    config['floating_ips'] = {'mgmt':mme_floating_ip}
    c.install(config)

    # # add dependency to enodeb
    # config = {}
    # config = {
    # 'ENODEB_NAME': 'enodeb',
    # 'NETWORK_IP':'192.168.3.0',
    # 'NETWORK_MASK':'255.255.255.0',
    # 'NETWORK_START':'192.168.3.100',
    # 'NETWORK_END': '192.168.3.130'
    # }
    # config['floating_ips'] = {'mgmt':'160.85.4.49'}
    # c.add_dependency(config, 'enodeb')
    #
    # # add dependency to bt
    # config = {}
    # config = {
    # 'BT_NAME':'BT-5G-2675998530',
    # 'NETWORK_IP':'192.168.4.0',
    # 'NETWORK_MASK':'255.255.255.0',
    # 'NETWORK_START':'192.168.4.100',
    # 'NETWORK_END': '192.168.4.130'
    # }
    # config['floating_ips'] = {'mgmt':'160.85.4.49'}
    # c.add_dependency(config, 'bt')

    # add dependency to dns
    config = {}
    config = {
    'DNS_IP':'192.168.85.49',
    'DNS_REALM':'epc.mnc001.mcc001.3gppnetwork.org',
    'DNS_LISTEN':'192.168.85.97' # mme mgmt ip
    }
    config['floating_ips'] = {'mgmt':mme_floating_ip}
    c.add_dependency(config, 'dns')

    # add dependency to pgw_u
    config = {}
    config = {
    'OFP_DATAPATH_ID':'3812090105000000',
    'PGW_U_Upload_Interface_IP':'172.19.8.95', # net_d
    'PGW_U_Download_Interface_IP':'172.19.5.95' # net_a
    }
    config['floating_ips'] = {'mgmt':mme_floating_ip}
    c.add_dependency(config, 'pgw_u')

    # prestart
    config = {}
    config = {
 'MME_MGMT_IP': '192.168.85.97',
 'SGW_IP': '172.19.8.95', #net_d ip of pgwu-sgwu
 'MME_CONSOLE_PORT': '10080',
 'MME_NET_D_IP': '172.19.8.97',
 'DNS_REALM': 'epc.mnc001.mcc001.3gppnetwork.org',
 'SGWU_PGWU_FLOATING_IP_NET_D': '172.19.8.97',  # local IP of net_d
 'ENODEB_NET_C_IP': '6.6.6.40',   #not used
 'HSS_NAME':'slf',  #static
 'HSS_PORT':'13868',  #static
 'OFP_PORT':'6634',
 'OFP_PROTOCOL':'tcp',
 'SGWU_PGWU_NET_D':'172.19.8.95'
    }
    config['floating_ips'] = {'mgmt':mme_floating_ip}
    c.pre_start(config)

    # start
    config = {}
    config['floating_ips'] = {'mgmt':mme_floating_ip}
    c.start(config)

